"""
–ú–æ–¥—É–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ Django ORM.
–ó–∞–¥–∞–Ω–∏–µ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ select_related() –∏ prefetch_related().

select_related() - –¥–ª—è ForeignKey –∏ OneToOne —Å–≤—è–∑–µ–π (JOIN)
prefetch_related() - –¥–ª—è ManyToMany –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö ForeignKey —Å–≤—è–∑–µ–π (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
"""

from django.db import connection
from django.db.models import Prefetch
from .models import Author, Book, Publisher, Store, Review


def reset_queries():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    connection.queries_log.clear()


def print_query_count(description):
    """–í—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤."""
    query_count = len(connection.queries)
    print(f"{description}: {query_count} SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    return query_count


def demonstrate_n_plus_1_problem():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É N+1 –∑–∞–ø—Ä–æ—Å–æ–≤ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    –ü—Ä–æ–±–ª–µ–º–∞ N+1:
    - 1 –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
    - N –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏)
    """
    print("\nüö® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´ N+1 –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    reset_queries()
    
    # –ü–õ–û–•–û: –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø –∫ book.author –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
    books = Book.objects.all()  # 1 –∑–∞–ø—Ä–æ—Å
    
    print("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏ (–ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏):")
    for book in books:
        # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∏–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
        print(f"- '{book.title}' –∞–≤—Ç–æ—Ä: {book.author.name}")  # +N –∑–∞–ø—Ä–æ—Å–æ–≤
    
    query_count = print_query_count("‚ùå –ù–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    return query_count


def demonstrate_select_related():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ select_related() –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ForeignKey —Å–≤—è–∑–µ–π.
    
    select_related() –≤—ã–ø–æ–ª–Ω—è–µ—Ç LEFT OUTER JOIN –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
    –≤ –æ–¥–Ω–æ–º SQL –∑–∞–ø—Ä–æ—Å–µ.
    """
    print("\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –° select_related()")
    print("=" * 40)
    
    reset_queries()
    
    # –•–û–†–û–®–û: select_related –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    books = Book.objects.select_related('author', 'publisher').all()
    
    print("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ (–° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π):")
    for book in books:
        # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—É–¥–µ—Ç!
        print(f"- '{book.title}' –∞–≤—Ç–æ—Ä: {book.author.name}, –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {book.publisher.name}")
    
    query_count = print_query_count("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å select_related")
    return query_count


def demonstrate_prefetch_related_basic():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ prefetch_related() –¥–ª—è ManyToMany —Å–≤—è–∑–µ–π.
    
    prefetch_related() –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã 
    –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    print("\n‚úÖ –ë–ê–ó–û–í–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –° prefetch_related()")
    print("=" * 45)
    
    reset_queries()
    
    # –•–û–†–û–®–û: prefetch_related –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    books = Book.objects.prefetch_related('stores').all()
    
    print("üìö –ö–Ω–∏–≥–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –æ–Ω–∏ –ø—Ä–æ–¥–∞—é—Ç—Å—è:")
    for book in books:
        stores = book.stores.all()  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!
        store_names = [store.name for store in stores]
        print(f"- '{book.title}': {', '.join(store_names) if store_names else '–ù–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ'}")
    
    query_count = print_query_count("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å prefetch_related")
    return query_count


def demonstrate_prefetch_related_advanced():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ prefetch_related() —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º Prefetch.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–º –¥–∞–Ω–Ω—ã–º.
    """
    print("\nüöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –° Prefetch()")
    print("=" * 42)
    
    reset_queries()
    
    # –ü–†–û–î–í–ò–ù–£–¢–û: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (—Ä–µ–π—Ç–∏–Ω–≥ >= 4) —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥
    books = Book.objects.select_related('author').prefetch_related(
        Prefetch(
            'reviews',
            queryset=Review.objects.filter(rating__gte=4).order_by('-rating'),
            to_attr='positive_reviews'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç
        )
    ).all()
    
    print("üìö –ö–Ω–∏–≥–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏ (—Ä–µ–π—Ç–∏–Ω–≥ >= 4):")
    for book in books:
        print(f"\nüìñ '{book.title}' –∞–≤—Ç–æ—Ä: {book.author.name}")
        
        # positive_reviews - —ç—Ç–æ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç
        if hasattr(book, 'positive_reviews') and book.positive_reviews:
            for review in book.positive_reviews:
                print(f"   ‚≠ê {review.rating}/5: {review.comment[:50]}...")
        else:
            print("   üòî –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    
    query_count = print_query_count("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å Prefetch")
    return query_count


def demonstrate_combined_optimization():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ select_related() –∏ prefetch_related().
    
    –≠—Ç–æ —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏.
    """
    print("\nüéØ –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
    print("=" * 35)
    
    reset_queries()
    
    # –û–ü–¢–ò–ú–ê–õ–¨–ù–û: –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    books = Book.objects.select_related(
        'author',      # ForeignKey - –∏—Å–ø–æ–ª—å–∑—É–µ–º select_related
        'publisher'    # ForeignKey - –∏—Å–ø–æ–ª—å–∑—É–µ–º select_related
    ).prefetch_related(
        'stores',      # ManyToMany - –∏—Å–ø–æ–ª—å–∑—É–µ–º prefetch_related
        Prefetch(
            'reviews',
            queryset=Review.objects.order_by('-rating', '-created_date'),
            to_attr='sorted_reviews'
        )
    ).all()
    
    print("üìö –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö:")
    for book in books:
        print(f"\nüìñ '{book.title}'")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {book.author.name}")
        print(f"   üè¢ –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {book.publisher.name} ({book.publisher.country})")
        
        # –ú–∞–≥–∞–∑–∏–Ω—ã
        stores = book.stores.all()
        if stores:
            store_info = [f"{store.name} ({store.city})" for store in stores]
            print(f"   üè™ –ú–∞–≥–∞–∑–∏–Ω—ã: {', '.join(store_info)}")
        
        # –û—Ç–∑—ã–≤—ã
        if hasattr(book, 'sorted_reviews') and book.sorted_reviews:
            print(f"   üìù –û—Ç–∑—ã–≤—ã ({len(book.sorted_reviews)}):")
            for review in book.sorted_reviews[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                print(f"      ‚≠ê {review.rating}/5: {review.comment[:40]}...")
    
    query_count = print_query_count("üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    return query_count


def demonstrate_reverse_foreign_key_optimization():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω—ã—Ö ForeignKey —Å–≤—è–∑–µ–π.
    
    –ö–æ–≥–¥–∞ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ –∏ –≤—Å–µ –∏—Ö –∫–Ω–∏–≥–∏.
    """
    print("\nüìñ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–¢–ù–´–• –°–í–Ø–ó–ï–ô")
    print("=" * 35)
    
    reset_queries()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ —Å –∏—Ö –∫–Ω–∏–≥–∞–º–∏ –∏ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
    authors = Author.objects.prefetch_related(
        Prefetch(
            'books',
            queryset=Book.objects.select_related('publisher').order_by('-published_date'),
            to_attr='published_books'
        )
    ).all()
    
    print("üë§ –ê–≤—Ç–æ—Ä—ã –∏ –∏—Ö –∫–Ω–∏–≥–∏:")
    for author in authors:
        print(f"\nüë§ {author.name}")
        if hasattr(author, 'published_books') and author.published_books:
            for book in author.published_books:
                print(f"   üìñ '{book.title}' ({book.published_date.year}) - {book.publisher.name}")
        else:
            print("   üìñ –ö–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    query_count = print_query_count("üìñ –û–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏")
    return query_count


def run_optimization_comparison():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    print("üîß –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–ü–†–û–°–û–í")
    print("=" * 55)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É N+1
    bad_count = demonstrate_n_plus_1_problem()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    good_count = demonstrate_select_related()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    improvement = bad_count - good_count
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å {bad_count} –¥–æ {good_count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"‚ú® –£–ª—É—á—à–µ–Ω–∏–µ: -{improvement} –∑–∞–ø—Ä–æ—Å–æ–≤ ({improvement/bad_count*100:.1f}% —ç–∫–æ–Ω–æ–º–∏–∏)")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    demonstrate_prefetch_related_basic()
    demonstrate_prefetch_related_advanced()
    demonstrate_combined_optimization()
    demonstrate_reverse_foreign_key_optimization()
    
    print("\n" + "="*60)
    print("üí° –í–´–í–û–î–´ –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("‚Ä¢ select_related() - –¥–ª—è ForeignKey/OneToOne (JOIN –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)")
    print("‚Ä¢ prefetch_related() - –¥–ª—è ManyToMany/–æ–±—Ä–∞—Ç–Ω—ã–µ FK (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)")  
    print("‚Ä¢ Prefetch() - –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    print("‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


if __name__ == "__main__":
    run_optimization_comparison()
