#!/usr/bin/env python
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Django ORM –ø—Ä–æ–µ–∫—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python manage.py shell -c "from demo import run_full_demo; run_full_demo()"
"""

from books.models import Author, Book, Publisher, Store, Review
from books.queries import run_all_queries
from books.optimized_queries import run_optimization_comparison


def print_header(title, emoji="üî•"):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–µ–∫—Ü–∏–π."""
    print(f"\n{emoji} {title}")
    print("=" * (len(title) + 4))


def show_database_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•", "üìä")
    
    stats = {
        "–ê–≤—Ç–æ—Ä–æ–≤": Author.objects.count(),
        "–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤": Publisher.objects.count(), 
        "–ú–∞–≥–∞–∑–∏–Ω–æ–≤": Store.objects.count(),
        "–ö–Ω–∏–≥": Book.objects.count(),
        "–û—Ç–∑—ã–≤–æ–≤": Review.objects.count()
    }
    
    for category, count in stats.items():
        print(f"üìà {category}: {count}")


def show_model_relationships():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö."""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò", "üîó")
    
    # –ü—Ä–∏–º–µ—Ä –∫–Ω–∏–≥–∏ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
    book = Book.objects.select_related('author', 'publisher').prefetch_related('stores', 'reviews').first()
    
    if book:
        print(f"üìñ –ö–Ω–∏–≥–∞: '{book.title}'")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {book.author.name}")
        print(f"   üè¢ –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {book.publisher.name} ({book.publisher.country})")
        
        stores = book.stores.all()
        if stores:
            print(f"   üè™ –ü—Ä–æ–¥–∞–µ—Ç—Å—è –≤ {stores.count()} –º–∞–≥–∞–∑–∏–Ω–∞—Ö:")
            for store in stores:
                print(f"      ‚Ä¢ {store.name} (–≥. {store.city})")
        
        reviews = book.reviews.all()
        if reviews:
            print(f"   üìù –û—Ç–∑—ã–≤–æ–≤: {reviews.count()}")
            avg_rating = sum(r.rating for r in reviews) / len(reviews)
            print(f"   ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5")


def show_advanced_queries_examples():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    print_header("–ü–†–ò–ú–ï–†–´ –ü–†–û–î–í–ò–ù–£–¢–´–• –ó–ê–ü–†–û–°–û–í", "üîç")
    
    # –ê–≤—Ç–æ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–≥
    from django.db.models import Count, Avg
    
    top_author = Author.objects.annotate(
        books_count=Count('books')
    ).order_by('-books_count').first()
    
    if top_author:
        print(f"üìö –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ—Ä: {top_author.name} ({top_author.books_count} –∫–Ω–∏–≥)")
    
    # –ú–∞–≥–∞–∑–∏–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º
    top_store = Store.objects.annotate(
        books_count=Count('books')
    ).order_by('-books_count').first()
    
    if top_store:
        print(f"üè™ –ö—Ä—É–ø–Ω–µ–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω: {top_store.name} ({top_store.books_count} –∫–Ω–∏–≥)")
    
    # –ö–Ω–∏–≥–∞ —Å –ª—É—á—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    best_book = Book.objects.annotate(
        avg_rating=Avg('reviews__rating'),
        reviews_count=Count('reviews')
    ).filter(reviews_count__gt=0).order_by('-avg_rating').first()
    
    if best_book:
        print(f"‚≠ê –õ—É—á—à–∞—è –∫–Ω–∏–≥–∞: '{best_book.title}' (—Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {best_book.avg_rating:.2f})")


def show_countries_and_cities():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤."""
    print_header("–ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï", "üåç")
    
    # –°—Ç—Ä–∞–Ω—ã –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤
    from django.db.models import Count
    countries = Publisher.objects.values('country').annotate(
        count=Count('id')
    ).order_by('-count')
    
    print("üè¢ –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:")
    for country_data in countries:
        print(f"   ‚Ä¢ {country_data['country']}: {country_data['count']} –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤")
    
    # –ì–æ—Ä–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    cities = Store.objects.values('city').annotate(
        count=Count('id')
    ).order_by('-count')
    
    print("\nüè™ –ú–∞–≥–∞–∑–∏–Ω—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
    for city_data in cities:
        print(f"   ‚Ä¢ {city_data['city']}: {city_data['count']} –º–∞–≥–∞–∑–∏–Ω–æ–≤")


def test_admin_functionality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
    print_header("–ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û–ô –ü–ê–ù–ï–õ–ò", "‚öôÔ∏è")
    
    from django.contrib import admin
    from books.models import Author, Book, Publisher, Store, Review
    
    models_to_check = [Author, Book, Publisher, Store, Review]
    
    print("‚úÖ –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ:")
    for model in models_to_check:
        is_registered = model in admin.site._registry
        status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞" if is_registered else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
        print(f"   ‚Ä¢ {model.__name__}: {status}")


def run_full_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞."""
    print("üöÄ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DJANGO ORM QUERIES –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    show_database_statistics()
    
    # –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    show_model_relationships()
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    show_countries_and_cities()
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    show_advanced_queries_examples()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∫–∏
    test_admin_functionality()
    
    print_header("–ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–´–• –ó–ê–ü–†–û–°–û–í (–ó–ê–î–ê–ù–ò–ï 2)", "üéØ")
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–∏—è 2
    run_all_queries()
    
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (–ó–ê–î–ê–ù–ò–ï 3)", "‚ö°")
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    run_optimization_comparison()
    
    print_header("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï", "üéâ")
    print("‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    print("‚úÖ –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    print("\nüöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")


if __name__ == "__main__":
    run_full_demo()
